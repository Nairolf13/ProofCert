import { PrismaClient, Role } from '@prisma/client';
import { hash } from 'bcryptjs';
import * as readline from 'readline';

const prisma = new PrismaClient();

// Fonction pour lire l'entr√©e utilisateur de mani√®re asynchrone
const question = (query: string): Promise<string> => {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  return new Promise((resolve) => {
    rl.question(query, (answer) => {
      rl.close();
      resolve(answer);
    });
  });
};

async function createAdmin() {
  try {
    console.log('üõ†Ô∏è  Cr√©ation d\'un nouvel administrateur\n');
    
    // Demander les informations de l'administrateur
    const email = await question('üìß Email: ');
    const username = await question('üë§ Nom d\'utilisateur: ');
    const password = await question('üîí Mot de passe: ');
    const walletAddress = await question('üí≥ Adresse du portefeuille (optionnel, appuyez sur Entr√©e pour ignorer): ');
    
    // V√©rifier si l'email est d√©j√† utilis√©
    const existingUser = await prisma.user.findFirst({
      where: { 
        OR: [
          { email: email.toLowerCase() },
          ...(walletAddress ? [{ walletAddress: walletAddress.toLowerCase() }] : [])
        ]
      }
    });

    if (existingUser) {
      console.error('‚ùå Un utilisateur avec cet email ou cette adresse de portefeuille existe d√©j√†');
      return;
    }

    // Hacher le mot de passe
    const hashedPassword = await hash(password, 12);
    
    // Cr√©er l'utilisateur avec le r√¥le ADMIN
    const user = await prisma.user.create({
      data: {
        email: email.toLowerCase(),
        username,
        hashedPassword,
        walletAddress: walletAddress || null,
        role: Role.ADMIN
      },
      select: {
        id: true,
        email: true,
        username: true,
        walletAddress: true,
        role: true,
        createdAt: true,
        updatedAt: true
      }
    });

    console.log('\n‚úÖ Administrateur cr√©√© avec succ√®s !\n');
    console.log('Informations de l\'administrateur:');
    console.log('----------------------------');
    console.log(`ID: ${user.id}`);
    console.log(`Email: ${user.email}`);
    console.log(`Nom d'utilisateur: ${user.username}`);
    console.log(`R√¥le: ${user.role}`);
    if (user.walletAddress) {
      console.log(`Adresse du portefeuille: ${user.walletAddress}`);
    }
    console.log(`Date de cr√©ation: ${user.createdAt}`);
    console.log('\n‚ö†Ô∏è  Gardez ces informations en s√©curit√© !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'administrateur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// D√©marrer le processus de cr√©ation d'administrateur
createAdmin();
