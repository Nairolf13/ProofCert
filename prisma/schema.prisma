generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  username        String   
  hashedPassword  String   
  walletAddress   String?  @unique 
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  profileImage    String? 
  
  proofs        Proof[]
  refreshTokens  RefreshToken[]
  role           Role      @default(TENANT)
  properties     Property[] @relation("OwnerProperties")
  rentals        Rental[]   @relation("TenantRentals")
  
  @@map("users")
}

model Proof {
  id          String   @id @default(cuid())
  title       String?
  content     String?  @db.Text
  contentType ProofType
  hash        String   @unique
  ipfsHash    String?
  arweaveId   String?
  timestamp   DateTime @default(now())
  location    String? 
  isPublic    Boolean  @default(false)
  shareToken  String   @unique @default(cuid())
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId  String?
  property    Property? @relation("PropertyProofs", fields: [propertyId], references: [id])
  rentalId    String?
  rental      Rental?   @relation("RentalProofs", fields: [rentalId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("proofs")
}

model RefreshToken {
  id         String   @id @default(cuid())
  userId     String
  tokenHash  String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  ip         String?
  userAgent  String?
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Property {
  id          String    @id @default(cuid())
  title       String
  description String?
  address     String
  country     String
  region      String
  city        String
  area        Float   // superficie en mÂ²
  price       Float   // prix de la location
  isAvailable Boolean  @default(true)
  photos      String[]
  ownerId     String
  owner       User      @relation("OwnerProperties", fields: [ownerId], references: [id])
  rentals     Rental[]
  proofs      Proof[]   @relation("PropertyProofs")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Rental {
  id          String    @id @default(cuid())
  propertyId  String
  tenantId    String
  startDate   DateTime
  endDate     DateTime?
  property    Property  @relation(fields: [propertyId], references: [id])
  tenant      User      @relation("TenantRentals", fields: [tenantId], references: [id])
  proofs      Proof[]   @relation("RentalProofs")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ProofType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum Role {
  OWNER
  TENANT
}
